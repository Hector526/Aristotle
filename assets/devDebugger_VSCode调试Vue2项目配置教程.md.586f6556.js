import{_ as a,c as e,o,N as s}from"./chunks/framework.13ec461e.js";const t="/Aristotle/assets/VSCode调试Vue2项目配置教程1.9fd2df8a.png",l="/Aristotle/assets/VSCode调试Vue2项目配置教程2.96e4476b.png",r="/Aristotle/assets/VSCode调试Vue2项目配置教程3.cc3c26fd.png",n="/Aristotle/assets/VSCode调试Vue2项目配置教程4.87aef1fb.png",c="/Aristotle/assets/VSCode调试Vue2项目配置教程5.3fe8ed27.png",p="/Aristotle/assets/VSCode调试Vue2项目配置教程6.64d9c619.png",i="/Aristotle/assets/VSCode调试Vue2项目配置教程7.b8f0d4e7.png",d="/Aristotle/assets/VSCode调试Vue2项目配置教程8.b3a31191.png",h="/Aristotle/assets/VSCode调试Vue2项目配置教程9.3c384657.png",v=JSON.parse('{"title":"VSCode调试Vue2项目配置教程","description":"","frontmatter":{},"headers":[],"relativePath":"devDebugger/VSCode调试Vue2项目配置教程.md"}'),u={name:"devDebugger/VSCode调试Vue2项目配置教程.md"},_=s(`<h1 id="vscode调试vue2项目配置教程" tabindex="-1">VSCode调试Vue2项目配置教程 <a class="header-anchor" href="#vscode调试vue2项目配置教程" aria-label="Permalink to &quot;VSCode调试Vue2项目配置教程&quot;">​</a></h1><h2 id="创建调试配置文件" tabindex="-1">创建调试配置文件 <a class="header-anchor" href="#创建调试配置文件" aria-label="Permalink to &quot;创建调试配置文件&quot;">​</a></h2><h3 id="启动项目" tabindex="-1">启动项目 <a class="header-anchor" href="#启动项目" aria-label="Permalink to &quot;启动项目&quot;">​</a></h3><div class="language-powershell"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">yarn serve</span></span>
<span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">yarn serve</span></span>
<span class="line"></span></code></pre></div><p>终端如下图所示</p><p><img src="`+t+'" alt="启动项目" data-fancybox="gallery"></p><p>将本地启动的url记录下来。</p><h3 id="创建launch-json" tabindex="-1">创建launch.json <a class="header-anchor" href="#创建launch-json" aria-label="Permalink to &quot;创建launch.json&quot;">​</a></h3><p>进入VS Code软件，点击调试，点击创建 launch.json 文件。</p><p><img src="'+l+'" alt="创建launch.json" data-fancybox="gallery"></p><p>选择需要支持的浏览器类型。</p><p><img src="'+r+'" alt="选择浏览器类型" data-fancybox="gallery"></p><p>VS Code在项目目录-&gt;.vscode文件夹中创建launch.json。内容如下。</p><p><img src="'+n+'" alt="launch.json" data-fancybox="gallery"></p><p>将configurations中的url替换成第一步记录的url：<code>http://localhost:8001</code>。</p><h2 id="配置vue-config-js文件" tabindex="-1">配置vue.config.js文件 <a class="header-anchor" href="#配置vue-config-js文件" aria-label="Permalink to &quot;配置vue.config.js文件&quot;">​</a></h2><p>配置configureWebpack的devtool为<code>source-map</code></p><h3 id="情况一" tabindex="-1">情况一 <a class="header-anchor" href="#情况一" aria-label="Permalink to &quot;情况一&quot;">​</a></h3><p>按如下配置。</p><p><img src="'+c+'" alt="配置1" data-fancybox="gallery"></p><h3 id="情况二" tabindex="-1">情况二 <a class="header-anchor" href="#情况二" aria-label="Permalink to &quot;情况二&quot;">​</a></h3><p>按如下配置。</p><p><img src="'+p+'" alt="配置2" data-fancybox="gallery"></p><h2 id="映射打包目录和项目目录" tabindex="-1">映射打包目录和项目目录 <a class="header-anchor" href="#映射打包目录和项目目录" aria-label="Permalink to &quot;映射打包目录和项目目录&quot;">​</a></h2><p>在浏览器按F12打开调试，打开打包的一个页面，查看该页面路径。存在两种情况，如下图。</p><p><img src="'+i+'" alt="情况1" data-fancybox="gallery"></p><p>在.vscode文件夹中优化launch.json，将webpack打包的文件目录和实际项目目录对应。</p><p><img src="'+d+'" alt="情况2" data-fancybox="gallery"></p><p>完成配置。</p><h2 id="启动调试" tabindex="-1">启动调试 <a class="header-anchor" href="#启动调试" aria-label="Permalink to &quot;启动调试&quot;">​</a></h2><p>点击VS Code中的开始调试。</p><p><img src="'+h+'" alt="开始调试" data-fancybox="gallery"></p><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><p>在VS Code中的优点：</p><ol><li><p>直接在代码里面打断点。不需要在浏览器中找页面。</p></li><li><p>能直接查看当前的内存堆栈调用，能监听变量变化。变量内容显示比浏览器详细的多。</p></li></ol><p>主要是极大地方便了js逻辑调试，样式调试还是和浏览器一样。</p>',36),g=[_];function b(f,m,V,y,S,C){return o(),e("div",null,g)}const q=a(u,[["render",b]]);export{v as __pageData,q as default};
